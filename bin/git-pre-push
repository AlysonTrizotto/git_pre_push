#!/usr/bin/env php
<?php
require_once __DIR__ . '/../vendor/autoload.php';

use GitPrePush\GitPrePush;

function installHook(): void {
    $hookPath = getcwd() . '/.git/hooks/pre-push';
    $phpPath = PHP_BINARY ?: 'php';
    $marker = '# Generated by alysontrizotto/git-pre-push';

    // Safer hook content: do not block push if package is missing
    $hookContent = <<<SH
#!/bin/sh
$marker

# Safeguards: if the package or PHP is missing, skip without blocking push
if [ ! -f "vendor/autoload.php" ]; then
  echo "[git-pre-push] vendor/autoload.php não encontrado. Pulando hook."
  exit 0
fi

PHP_BIN="$phpPath"
if ! command -v "\$PHP_BIN" >/dev/null 2>&1; then
  echo "[git-pre-push] PHP não encontrado no PATH. Pulando hook."
  exit 0
fi

"$phpPath" -r "require 'vendor/autoload.php'; if (!class_exists('GitPrePush\\\\GitPrePush')) { fwrite(STDERR, '[git-pre-push] Classe GitPrePush não encontrada. Pulando hook.\n'); exit(0);} (new GitPrePush\\\\GitPrePush())->run();"
SH;

    file_put_contents($hookPath, $hookContent);
    @chmod($hookPath, 0755);
    echo "Hook pre-push instalado em $hookPath\n";
}

function uninstallHook(): void {
    $hookPath = getcwd() . '/.git/hooks/pre-push';
    $marker = '# Generated by alysontrizotto/git-pre-push';

    if (!file_exists($hookPath)) {
        echo "Nenhum hook pre-push para remover em $hookPath\n";
        return;
    }
    $contents = @file_get_contents($hookPath) ?: '';
    if (strpos($contents, $marker) === false) {
        echo "Hook existente não foi gerado por este pacote. Não será removido: $hookPath\n";
        return;
    }
    if (@unlink($hookPath)) {
        echo "Hook pre-push removido: $hookPath\n";
    } else {
        echo "Falha ao remover o hook em $hookPath. Verifique permissões.\n";
    }
}

if ($argc > 1) {
    if ($argv[1] === 'install-hook') {
        installHook();
        exit(0);
    }
    if ($argv[1] === 'uninstall-hook') {
        uninstallHook();
        exit(0);
    }
}

// Só executa se chamado diretamente (não via Composer scripts)
if (php_sapi_name() === 'cli' && empty(getenv('COMPOSER_DEV_MODE'))) {
    // Verifica existência do .env.testing
    $envTestingPath = getcwd() . '/.env.testing';
    if (!file_exists($envTestingPath)) {
        echo "[ERRO] Arquivo .env.testing não encontrado. Crie um .env.testing para rodar os testes de push. Push abortado!\n";
        exit(1);
    }

    // Garante que PHPUnit use o .env.testing
    putenv('APP_ENV=testing');
    putenv('ENV_FILE=.env.testing');

    (new GitPrePush())->run();
}
